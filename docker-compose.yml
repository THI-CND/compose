services:
  postgres:
    build: .
    volumes:
      - postgres_data:/var/lib/postgresql/data
    restart: unless-stopped
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
      POSTGRES_MULTIPLE_DATABASES: recipe,collection,notification,users,ingredient,review,shoppinglist

  fluent-bit:
    image: fluent/fluent-bit:latest
    volumes:
      - ./fluent-bit.conf:/fluent-bit.conf
    command: ["-c", "/fluent-bit.conf"]
    ports:
      - "9880:9880"

  redis:
    image: redis/redis-stack:latest
    restart: unless-stopped
    command : redis-server --requirepass password
    ports: 
      - "6379:6379"
      - "8001:8001"
  
  rabbitmq:
    image: rabbitmq:3-management
    restart: unless-stopped
    ports:
      - "5672:5672"
      - "15672:15672"
    healthcheck:
        test: rabbitmq-diagnostics -q ping
        interval: 15s
        timeout: 30s
        retries: 5

  recipe-service:
    pull_policy: always
    image: ghcr.io/thi-cnd/recipe_service:latest
    restart: unless-stopped
    ports:
      - "8088:8080"
      - "9098:9090"
    environment:
      DB_URL: jdbc:postgresql://postgres:5432/recipe
      DB_USER: postgres
      DB_PASSWORD: password
      RABBIT_HOST: rabbitmq
      RABBIT_PORT: 5672
      RABBIT_USER: guest
      RABBIT_PASSWORD: guest
      INGREDIENT_SERVICE_ADDRESS: ingredient-service:9090
      RABBIT_EXCHANGE: recipemanagement
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: password
      REDIS_DATABASE: 1
    depends_on:
      - postgres
      - rabbitmq

  collection-service:
    pull_policy: always
    image: ghcr.io/thi-cnd/collection_service:latest
    ports:
      - "8000:8000"
      - "50051:50051" 
    environment:
        SECRET_KEY_DJANGO: django-insecure-vm$+=b8+s&54m6*yz*h&7m2b0nq_+ujg30akgs%+v5jw!p_=xg
        DJANGO_SETTINGS_MODULE: config.settings.development
        DB_NAME: collection
        DB_USER: postgres
        DB_PASSWORD: password
        DB_HOST: postgres
        DB_PORT: 5432
        RABBITMQ_USER: guest
        RABBITMQ_PASSWORD: guest
        RABBITMQ_HOST: rabbitmq
        RABBITMQ_PORT: 5672
        RABBITMQ_EXCHANGE: recipemanagement
        RABBITMQ_ROUTING_KEYS_COLLECTION: collection.created,collection.updated,collection.deleted
        GRPC_HOST_RECIPE_SERVICE: recipe-service
        GRPC_PORT_RECIPE_SERVICE: 9090
    restart: unless-stopped
    depends_on:
     postgres:
       condition: service_started
     rabbitmq:
       condition: service_healthy
    
  notification-service:
    pull_policy: always
    image: ghcr.io/thi-cnd/notification_service:latest
    ports:
      - "8081:8080"
      - "9091:9090"
    environment:
        DB_URL: jdbc:postgresql://postgres:5432/notification
        DB_USER: postgres
        DB_PASSWORD: password
        RABBITMQ_USER: guest
        RABBITMQ_PASSWORD: guest
        RABBITMQ_HOST: rabbitmq
        RABBIT_PORT: 5672
        RABBITMQ_EXCHANGE: recipemanagement
        RABBITMQ_ROUTING_KEYS_COLLECTION: collection.created,collection.updated,collection.deleted
        RABBITMQ_ROUTING_KEYS_REVIEW: review.created
        RABBITMQ_ROUTING_KEYS_USER: users.count
        RABBITMQ_QUEUE_COLLECTION: collection.queue
        RABBITMQ_QUEUE_REVIEW: review.queue
        RABBITMQ_QUEUE_USER: user.queue
        GRPC_USER_SERVICE_HOST: user-service
        GRPC_USER_SERVICE_PORT: 8081
    restart: unless-stopped
    depends_on:
     postgres:
       condition: service_started
     rabbitmq:
       condition: service_healthy
  
  user-service:
    pull_policy: always
    image: ghcr.io/thi-cnd/user_service:latest
    ports: 
      - 8082:8082
      - 9092:8081
    environment:
      GIN_MODE: release
      DB_HOST: postgres
      DB_PORT: 5432
      DB_USER: postgres
      DB_PASSWORD: password
      DB_NAME: users
      RABBIT_HOST: rabbitmq
      RABBIT_PORT: 5672
      RABBIT_USER: guest
      RABBIT_PASSWORD: guest
      FLUENTD_HOST: fluent-bit
      FLUENTD_PORT: 9880
    restart: unless-stopped
    depends_on:
      - postgres
      - rabbitmq
      - fluent-bit

  ingredient-service:
    pull_policy: always
    image: ghcr.io/thi-cnd/ingredient_service:latest
    restart: unless-stopped
    ports:
      - "8083:8080"
      - "9093:9090"
    environment:
      DB_URL: jdbc:postgresql://postgres:5432/ingredient
      DB_USER: postgres
      DB_PASSWORD: password
      RABBIT_HOST: rabbitmq
      RABBIT_PORT: 5672
      RABBIT_USER: guest
      RABBIT_PASSWORD: guest
      RABBIT_EXCHANGE: recipemanagement
    depends_on:
      - postgres
      - rabbitmq

  review-service:
    pull_policy: always
    image: ghcr.io/thi-cnd/review_service:latest
    restart: unless-stopped
    ports:
      - "8084:8080"
      - "9094:9090"
    environment:
      DB_URL: jdbc:postgresql://postgres:5432/review
      DB_USER: postgres
      DB_PASSWORD: password
      RABBIT_HOST: rabbitmq
      RABBIT_PORT: 5672
      RABBIT_USER: guest
      RABBIT_PASSWORD: guest
      RABBIT_EXCHANGE: recipemanagement
      USER_SERVICE_ADDRESS: user-service:8081
    depends_on:
      - postgres
      - rabbitmq

  feed-service:
    pull_policy: always
    image: ghcr.io/thi-cnd/feed_service:latest
    restart: unless-stopped
    environment:
      RECIPE_SERVICE_URL: recipe-service:9090
      COLLECTION_SERVICE_URL: http://collection-service:8000/api/v1/collections
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: password
      RABBITMQ_HOST: rabbitmq
      RABBITMQ_PORT: 5672
      RABBITMQ_USERNAME: guest
      RABBITMQ_PASSWORD: guest
      FLUENTD_HOST: fluent-bit
      FLUENTD_PORT: 9880
    ports:
      - "8085:8080"

  shoppinglist-service:
    pull_policy: always
    image: ghcr.io/thi-cnd/shoppinglist_service:latest
    restart: unless-stopped
    ports:
      - "8086:3000"
      - "9096:9009"
    environment:
      DB_HOST: postgres
      DB_PORT: 5432
      DB_USER: postgres
      DB_PASSWORD: password
      DB_NAME: shoppinglist
      RABBIT_URL: amqp://guest:guest@rabbitmq:5672/
      RECIPE_SERVICE_ADDRESS: recipe-service:9090
      RABBIT_EXCHANGE: recipemanagement

  frontend:
    pull_policy: always
    image: ghcr.io/thi-cnd/frontend:latest
    restart: unless-stopped

  proxy:
    image: nginx:alpine
    restart: unless-stopped
    ports:
      - "80:80"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf

volumes:
  postgres_data:
